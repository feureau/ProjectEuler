/*
Given the Problem:

    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

         1: 1

         3: 1,3

         6: 1,2,3,6

        10: 1,2,5,10

        15: 1,3,5,15

        21: 1,3,7,21

        28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?

Given the Solution in Java:

*/
    /*

     * To change this template, choose Tools | Templates

     * and open the template in the editor.

     */

    package projecteuler12;

    /**

     *

     * @author Feureau

     */

    public class Main {

        /**

         * @param args the command line arguments

         */

        public static void main(String[] args) {

            // TODO code application logic here

            long finalAnswer=0;

            int targetNumberOfDivisor=500;

            long numberOfDivisor=0;

            long nthTriangleNumber=1;

            long triangleNumber=0;

            for (;numberOfDivisor

            {

                triangleNumber+=nthTriangleNumber;

                numberOfDivisor=returnNumberOfDivisor2(triangleNumber);

                if(nthTriangleNumber%100==0)

                {

                    if(nthTriangleNumber==1)

                    {

                        System.out.println(nthTriangleNumber+"st Triangle Number is "+triangleNumber+" with "+numberOfDivisor+" number of divisor.");

                    }

                    if(nthTriangleNumber==2)

                    {

                        System.out.println(nthTriangleNumber+"nd Triangle Number is "+triangleNumber+" with "+numberOfDivisor+" number of divisor.");

                    }

                    if(nthTriangleNumber==3)

                    {

                        System.out.println(nthTriangleNumber+"rd Triangle Number is "+triangleNumber+" with "+numberOfDivisor+" number of divisor.");

                    }

                    if(nthTriangleNumber&gt;3)

                    {

                        System.out.println(nthTriangleNumber+"th Triangle Number is "+triangleNumber+" with "+numberOfDivisor+" number of divisor.");

                    }

                }

                finalAnswer=triangleNumber;

            }

            System.out.println("the first triangle number to have over "+targetNumberOfDivisor+" divisors is "+finalAnswer+". Which is the "+nthTriangleNumber+"th triangle number.");

        }

        public static long returnNumberOfDivisor(long x) //Brute Force: Very very slow

        {

            int total = 0;

            for(int i=1; i

            {

              if(x%i == 0) total+=1;

            }

            return total;

        }

        public static long returnNumberOfDivisor2(long sum) //Much faster algorithm

        {

            long divisors = 2;

            double root = Math.sqrt(sum);

            for(int i = 2; i &lt;= root ; i++)

            {

                if(sum % i == 0)

                {

                    divisors += 2;

                }

        }

        return divisors;

      }

    }

/*
The Solution in numerical value:

    76576500
*/